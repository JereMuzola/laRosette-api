import { ErrorResponse } from "src/utilities/error";
import { DaoAchatService } from '../dao/dao.achat.service';
import { DaoStockService } from "../dao/dao.stock.service";
import { AchatModel } from "../models/achat";
import { CommandeModel } from '../models/commande';
import { FournisseurModel } from "../models/fournisseur";
import { BonDeDecaissementModel } from "../models/toReport/bonDeDecaissement";
import { OrdreDeDecaissementModel } from "../models/toReport/ordreDeDecaissement";
export declare class AchatService {
    private readonly dao;
    private readonly daoStock;
    private error;
    constructor(dao: DaoAchatService, daoStock: DaoStockService);
    getError(): ErrorResponse;
    addCommande(payload: CommandeModel): Promise<CommandeModel>;
    calculateMontantTotal(payload: CommandeModel): Promise<any>;
    validateCommande(payload: CommandeModel): Promise<CommandeModel>;
    validateCommandeByCoordon(payload: CommandeModel): Promise<CommandeModel>;
    annulerCommande(payload: CommandeModel): Promise<CommandeModel>;
    decaisserCommande(payload: CommandeModel): Promise<CommandeModel>;
    getCommande(code: string): Promise<CommandeModel>;
    getAllCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllBonDeDecaissement(fkAgence: string): Promise<BonDeDecaissementModel[]>;
    getAllBonDeDecaissementByPeriod(fkAgence: string, debut: Date, fin: Date): Promise<BonDeDecaissementModel[]>;
    getAllOrdreDeDecaissement(fkAgence: string): Promise<OrdreDeDecaissementModel[]>;
    getAllOrdreDeDecaissementByPeriod(fkAgence: string, debut: Date, fin: Date): Promise<OrdreDeDecaissementModel[]>;
    getAllCommandeByPeriodAndEtat(fkAgence: string, debut: Date, fin: Date, etat: string): Promise<CommandeModel[]>;
    getLastCommande(fkAgence: string): Promise<CommandeModel[]>;
    getCommandeByBDD(codeBDD: string, agence: string): Promise<CommandeModel[]>;
    getAllInitCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllAnnuleCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllValideCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllValideCommandeWithoutAgence(): Promise<CommandeModel[]>;
    getAllDecaisseCommande(fkAgence: string): Promise<CommandeModel[]>;
    deleteLogicCommande(code: string): Promise<CommandeModel>;
    addAchat(payload: AchatModel): Promise<AchatModel>;
    cloturerAchat(code: string): Promise<AchatModel>;
    getAchat(code: string): Promise<AchatModel>;
    logicDeleteAchat(code: string): Promise<AchatModel>;
    getAllAchat(fkAgence: string): Promise<AchatModel[]>;
    getAchatByState(state: string): Promise<AchatModel[]>;
    getAchatByPeriod(debut: Date, fin: Date): Promise<AchatModel[]>;
    getAchatByPeriodAndState(debut: Date, fin: Date, state: string): Promise<AchatModel[]>;
    addFournisseur(payload: FournisseurModel): Promise<FournisseurModel>;
    getAllFournisseur(): Promise<FournisseurModel[]>;
    deleteFournisseur(code: string): Promise<FournisseurModel>;
    getFournisseur(code: string): Promise<FournisseurModel>;
}
