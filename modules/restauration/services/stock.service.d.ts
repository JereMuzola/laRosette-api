import { ErrorResponse } from "src/utilities/error";
import { DaoAchatService } from '../dao/dao.achat.service';
import { DaoStockService } from "../dao/dao.stock.service";
import { ArticleModel } from "../models/article";
import { CategorieArticleModel } from "../models/categorieArticle";
import { CompositionModel } from "../models/composition";
import { MouvementStockModel } from '../models/mouvementStock';
import { StockArticleModel } from "../models/stockArticle";
export declare class StockService {
    private readonly dao;
    private readonly daoAchat;
    private error;
    constructor(dao: DaoStockService, daoAchat: DaoAchatService);
    getError(): ErrorResponse;
    addArticle(payload: ArticleModel): Promise<ArticleModel>;
    addMouvementStock(payload: MouvementStockModel): Promise<MouvementStockModel>;
    getArticle(code: string): Promise<ArticleModel>;
    getAllArticle(fkAgence: string): Promise<ArticleModel[]>;
    getArticleByType(fkAgence: string, type: string): Promise<ArticleModel[]>;
    getArticleArticle(fkAgence: string): Promise<ArticleModel[]>;
    getArticleDispo(fkAgence: string): Promise<ArticleModel[]>;
    getValeurTotalInStock(fkAgence: string): Promise<number>;
    getValeurInStockByArticle(fkAgence: string): Promise<ArticleModel[]>;
    getPlat(fkAgence: string): Promise<ArticleModel[]>;
    logicDeleteArticle(code: string): Promise<ArticleModel>;
    addComposition(payload: CompositionModel): Promise<CompositionModel>;
    getComposition(id: number): Promise<CompositionModel>;
    getCompositionByArticleCompose(fkArticleCompose: string): Promise<CompositionModel[]>;
    deleteComposition(id: number): Promise<CompositionModel>;
    addCategorieArticle(payload: CategorieArticleModel): Promise<CategorieArticleModel>;
    getCategorieArticle(code: string): Promise<CategorieArticleModel>;
    getAllCategorieArticle(): Promise<CategorieArticleModel[]>;
    getCategorieArticleByUnite(unite: string): Promise<CategorieArticleModel[]>;
    logicDeleteCategorieArticle(code: string): Promise<CategorieArticleModel>;
    updateStockArticle(payload: StockArticleModel): Promise<StockArticleModel>;
    getStockArticle(code: string): Promise<StockArticleModel>;
    getAllStockArticle(): Promise<StockArticleModel[]>;
    getStockArticleByArticle(fkArticle: string): Promise<StockArticleModel>;
    getStockArticleAlerted(): Promise<StockArticleModel[]>;
    getMouvementStockByTypeMouvement(fkAgence: string, type_mouvement: string, debut: Date, fin: Date): Promise<MouvementStockModel[]>;
    getMouvementByTypeMouvementGroupedByArticle(fkAgence: string, type_mouvement: string, debut: Date, fin: Date): Promise<any[]>;
    getMouvementStockByArticle(article: string): Promise<MouvementStockModel[]>;
    getMouvementStockByArticleAndTypeMouvement(article: string, type_mouvement: string): Promise<MouvementStockModel[]>;
}
