import { PrismaService } from 'src/orm/prisma.service';
import { ArticleModel } from '../models/article';
import { StockArticleModel } from '../models/stockArticle';
import { MouvementStockModel } from '../models/mouvementStock';
import { CategorieArticleModel } from '../models/categorieArticle';
import { CompositionModel } from '../models/composition';
export declare class DaoStockService {
    private static _instance;
    private static _prisma;
    static instance(): PrismaService;
    constructor();
    addArticle(payload: ArticleModel): Promise<ArticleModel>;
    updateArticle(payload: ArticleModel): Promise<ArticleModel>;
    getArticle(code: string): Promise<ArticleModel>;
    verifyArticle(designation: string): Promise<ArticleModel>;
    getAllArticle(fkAgence: string): Promise<ArticleModel[]>;
    getArticleByType(fkAgence: string, type: string): Promise<ArticleModel[]>;
    getArticleArticle(fkAgence: string): Promise<ArticleModel[]>;
    getArticleDispo(fkAgence: string): Promise<ArticleModel[]>;
    getPlat(fkAgence: string): Promise<ArticleModel[]>;
    getPlatDisponible(fkAgence: string): Promise<ArticleModel[]>;
    logicDeleteArticle(code: String): Promise<ArticleModel>;
    addCompostion(payload: CompositionModel): Promise<CompositionModel>;
    updateComposition(payload: CompositionModel): Promise<CompositionModel>;
    getCompositionByArticleCompose(fkCompose: string): Promise<CompositionModel[]>;
    getComposition(id: number): Promise<CompositionModel>;
    deleteCompositionArticle(id: number): Promise<CompositionModel>;
    addCategorieArticle(payload: CategorieArticleModel): Promise<CategorieArticleModel>;
    verifyCategorieArticle(description: string): Promise<CategorieArticleModel>;
    updateCategorieArticle(payload: CategorieArticleModel): Promise<CategorieArticleModel>;
    getCategorieArticle(code: string): Promise<CategorieArticleModel>;
    getAllCategorieArticle(): Promise<CategorieArticleModel[]>;
    getCategorieArticleByUnite(unite: string): Promise<CategorieArticleModel[]>;
    logicDeleteCategorieArticle(code: String): Promise<CategorieArticleModel>;
    updateStockArticle(payload: StockArticleModel): Promise<StockArticleModel>;
    getStockArticle(code: string): Promise<StockArticleModel>;
    getValeurTotalInStock(fkAgence: string): Promise<number>;
    getValeurInStockByArticle(fkAgence: string): Promise<ArticleModel[]>;
    getAllStockArticle(): Promise<StockArticleModel[]>;
    getStockArticleByArticle(article: string): Promise<StockArticleModel>;
    getStockArticleAlerted(): Promise<StockArticleModel[]>;
    addMouvementStock(payload: MouvementStockModel): Promise<MouvementStockModel>;
    getMouvementStockByTypeMouvement(fkAgence: string, type_mouvement: string, debut: Date, fin: Date): Promise<MouvementStockModel[]>;
    getMouvementStockByTypeMouvementGroupedByArticle(fkAgence: string, type_mouvement: string, debut: Date, fin: Date): Promise<any[]>;
    getMouvementStockByArticle(article: string): Promise<MouvementStockModel[]>;
    getMouvementStockByTypeMouvementAndArticle(article: string, type_mouvement: string): Promise<MouvementStockModel[]>;
}
