import { PrismaService } from "src/orm/prisma.service";
import { AchatModel } from "../models/achat";
import { CommandeModel } from "../models/commande";
import { OrdreDeDecaissementModel } from '../models/toReport/ordreDeDecaissement';
import { BonDeDecaissementModel } from "../models/toReport/bonDeDecaissement";
import { FournisseurModel } from "../models/fournisseur";
export declare class DaoAchatService {
    private static _instance;
    private static _prisma;
    static instance(): PrismaService;
    constructor();
    addCommande(payload: CommandeModel): Promise<CommandeModel>;
    updateCommande(payload: CommandeModel): Promise<CommandeModel>;
    validateCommande(payload: CommandeModel): Promise<CommandeModel>;
    validateCommandeByCoordon(payload: CommandeModel): Promise<CommandeModel>;
    annulerCommande(payload: CommandeModel): Promise<CommandeModel>;
    decaisserCommande(payload: CommandeModel): Promise<CommandeModel>;
    getCommande(code: string): Promise<CommandeModel>;
    getLastCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllInitCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllAnnuleCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllValideCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllValideCommandeByPeriod(fkAgence: string, debut: Date, fin: Date): Promise<CommandeModel[]>;
    getAllValideCommandeWithoutAgence(): Promise<CommandeModel[]>;
    getAllDecaisseCommande(fkAgence: string): Promise<CommandeModel[]>;
    getAllCommandeByPeriodAndEtat(fkAgence: string, etat: string, debut: Date, fin: Date): Promise<CommandeModel[]>;
    getCommandeByState(state: string): Promise<CommandeModel[]>;
    getCommandeByPeriod(debut: Date, fin: Date): Promise<CommandeModel[]>;
    getCommandeByPeriodAndState(debut: Date, fin: Date, state: string): Promise<CommandeModel[]>;
    getCommandeByBDD(codeBdd: string, agence: string): Promise<CommandeModel[]>;
    logicDeleteCommande(code: String): Promise<CommandeModel>;
    definitiveDeleteCommande(payload: CommandeModel): Promise<CommandeModel>;
    getAllBonDeDecaissement(fkAgence: string): Promise<BonDeDecaissementModel[]>;
    getAllBonDeDecaissementByPeriod(fkAgence: string, debut: Date, fin: Date): Promise<BonDeDecaissementModel[]>;
    getAllOrdreDeDecaissement(fkAgence: string): Promise<OrdreDeDecaissementModel[]>;
    getAllOrdreDeDecaissementByPeriod(fkAgence: string, debut: Date, fin: Date): Promise<OrdreDeDecaissementModel[]>;
    addAchat(payload: AchatModel): Promise<AchatModel>;
    updateAchat(payload: AchatModel): Promise<AchatModel>;
    clotureAchat(payload: AchatModel): Promise<AchatModel>;
    getAchat(code: string): Promise<AchatModel>;
    getAllAchat(fkAgence: string): Promise<AchatModel[]>;
    getAchatByState(state: string): Promise<AchatModel[]>;
    getAchatByPeriod(debut: Date, fin: Date): Promise<AchatModel[]>;
    getAchatByPeriodAndState(debut: Date, fin: Date, state: string): Promise<AchatModel[]>;
    logicDeleteAchat(code: String): Promise<AchatModel>;
    definitiveDeleteAchat(payload: AchatModel): Promise<AchatModel>;
    addFournisseur(payload: FournisseurModel): Promise<FournisseurModel>;
    getFournisseur(code: string): Promise<FournisseurModel>;
    getAllFournisseur(): Promise<FournisseurModel[]>;
    deleteFournisseur(code: string): Promise<FournisseurModel>;
    updateFournisseur(payload: FournisseurModel): Promise<FournisseurModel>;
}
